paths:

#Root
  "/":
    x-exegesis-controller: edrRootController
    get:
      summary: Get the landing/root page of this API
      x-exegesis-operationId: edrGetRoot
      parameters:
        - $ref: "#/components/parameters/f"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: array
                    items:
                      $ref: "#/components/schemas/link"
                  keywords:
                    $ref: "#/components/schemas/keywords"
                  provider:
                    $ref: "#/components/schemas/provider"
                  contact:
                    $ref: "#/components/schemas/contact"
            text/yaml:
              type: string
  
  
  "/conformance":
    x-exegesis-controller: edrConformanceController
    get:
      x-exegesis-operationId: edrGetConformance
      parameters:
        - $ref: "#/components/parameters/f"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                required:
                  - links
                  - conformsTo
                properties:
                  conformsTo:
                    type: array
                    items:
                      type: string
                  links:
                    type: array
                    items:
                      $ref: "#/components/schemas/link"
            text/yaml:
              type: string
  
# Collections get All Collections [All]
  "/collections":
    x-exegesis-controller: edrCollectionsController
    get:
      x-exegesis-operationId: edrQueryCollectionsRoot
      parameters:
        - $ref: "#/components/parameters/bbox"
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/datetime"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                type: object
                required:
                  - collections
                  - links
                properties:
                  links:
                    type: array
                    items:
                      $ref: "#/components/schemas/link"
                  collections:
                    type: array
                    items:
                      $ref: "#/components/schemas/collection"
            text/yaml:
              type: string
  
# Collections Get Specific Collection [One]
  "/collections/{collectionId}":
    x-exegesis-controller: edrCollectionsController
    get:
      x-exegesis-operationId: edrGetOneCollection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/f"
      responses:
        "200":
          description: Ok.
          content:  
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
            text/yaml:
              schema:
                type: string


# Collection get Available Instances [All]
  "/collections/{collectionId}/instances":
    x-exegesis-controller: edrInstancesQueryController
    get:
      x-exegesis-operationId: getInstancesInCollection
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/f"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/instances"
        

# Collection get Specific Instance in Collection [One]
  "/collections/{collectionId}/instances/{instanceId}":
    x-exegesis-controller: edrInstancesQueryController
    get:  
      x-exegesis-operationId: getAnInstanceInCollection
      parameter:  
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/instanceId"
        - $ref: "#/components/parameters/f"
      responses:
        "200":
          description: Ok.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
            

# Collection With No Instances [Items][All]
  "/collections/{collectionId}/items":
    x-exegesis-controller: edrResources_CollectionIdController
    get: 
      x-exegesis-operationId: getItemsInCollection_NoInstance
      parameters:
        - $ref: "#/components/parameters/bbox" #4Item
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/f" ##Double check
      responses:
        "200":
          description: Ok.
          content: 
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeature"
            text/yaml:
              schema:
                type: string
            application/json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeature"

# Collection with No Instances [itemId][One]
  "/collections/{collectionId}/items/{itemId}":
    x-exegesis-controller: edrResources_CollectionIdController
    get: 
      x-exegesis-operationId: getAnItemInCollection_NoInstance
      parameters:
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/itemId"
      responses:
        "200":
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeature"
            text/yaml:
              schema:
                type: string

# Collection with Instances [Instance=>Items]
  "/collections/{collectionId}/instances/{instanceId}/items":
    x-exegesis-controller: edrItemsQueryController
    get:
      x-exegesis-operationId: getItemsInInstance
      parameters:
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/bbox"
        - $ref: "#/components/parameters/instanceId"
        - $ref: "#/components/parameters/datetime"
      responses:
        "200":
          description: Ok.
          content:
            application/geo+json:
              schema: 
                $ref: "#/components/schemas/edrGeoJSONFeatureCollection"
            text/yaml:
              schema: 
                type: string
          
# Collection with Instances [Instance=>Items=>itemId]
  "/collections/{collectionId}/instances/{instanceId}/items/{itemId}":
    x-exegesis-controller: edrItemsQueryController
    get:
      x-exegesis-operationId: getAnItemInInstance
      parameters:
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/itemId"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/instanceId"
      responses:
        "200":
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeature"
            text/yaml:
              schema:
                type: string

# Collection=>CollectionId=>Position
  "/collections/{collectionId}/position":
    x-exegesis-controller: edrPositionQueryController
    get:
      x-exegesis-operationId: edrPositionGet
      parameters: 
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/coords"
        - $ref: "#/components/parameters/z"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/parameter-name"
  
  
  "/collections/{collectionId}/radius":
    x-exegesis-controller: edrResources_CollectionIdController
    get: 
      x-exegesis-operationId: edrRadiusGet
      parameters:
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/coords"
        - $ref: "#/components/parameters/z"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/parameter-name"  
        - $ref: "#/components/parameters/within"
        - $ref: "#/components/parameters/within-units"
  

##################################Area Queries

# Collection=>CollectionId=>Area
  "/collections/{collectionId}/area":
    x-exegesis-controller: edrAreaQueryController
    get:
      x-exegesis-operationId: getFeaturesWithArea_collection
      parameters:
        - $ref: "#/components/parameters/areaCoords"
        - $ref: "#/components/parameters/z"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/parameter-name"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/resolution-x"
        - $ref: "#/components/parameters/resolution-y"
      responses:
        "200":
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeatureCollection"
            application/vnd.cov+json:
              schema:
                $ref: "#/components/schemas/coverageJSON"

# Collection=>CollectionId=>Instances=>InstanceId=>Area
  "/collections/{collectionId}/instances/{instanceId}/area":
    x-exegesis-controller: edrAreaQueryController
    get:
      x-exegesis-operationId: getFeaturesWithinArea_instance
      parameters:
        - $ref: "#/components/parameters/areaCoords"
        - $ref: "#/components/parameters/z"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/parameter-name"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/instanceId"
        - $ref: "#/components/parameters/resolution-x"
        - $ref: "#/components/parameters/resolution-y"
      responses:
        "200":
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeatureCollection"
            application/vnd.cov+json:
              schema:
                $ref: "#/components/schemas/coverageJSON"


####################################Cube Queries

# CollectionId=> Cube
  "/collections/{collectionId}/cube":
    x-exegesis-controller: edrCubeQueryController
    get:
      x-exegesis-operationId: getFeaturesWithinCube_collection
      parameters:
        - $ref: "#/components/parameters/bbox" 
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/cube-z"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/parameter-name"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/f"
      responses:
        "200":  
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/component/schemas/edrGeoJSONFeatureCollection"
            application/vnd.cov+json:
              schema:
                $ref: "#/components/schemas/coverageJSON"
            text/yaml:
              schema:
                type: string

# CollectionId=>InstanceId=> Cube
  "/collections/{collectionId}/instances/{instanceId}/cube":
    x-exegesis-controller: edrCubeQueryController
    get:
      x-exegesis-operationId: getFeaturesWithinCube_collection
      parameters:
        - $ref: "#/components/parameters/bbox" 
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/instanceId"
        - $ref: "#/components/parameters/cube-z"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/parameter-name"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/f"
      responses:
        "200":  
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/component/schemas/edrGeoJSONFeatureCollection"
            application/vnd.cov+json:
              schema:
                $ref: "#/components/schemas/coverageJSON"
            text/yaml:
              schema:
                type: string


###########################Location Queries

# CollectionId=>Locations
  "/collections/{collectionId}/locations":
    x-exegesis-controller: edrLocationsQueryController
    get:
      x-exegesis-operationId: getLocations_collection
      parameters:
        - $ref: "#/components/parameters/datetime"
        #- $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/f"
        - $ref: "#/components/parameters/bbox"
      responses:
        "200":
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeatureCollection"
            text/yaml:
              schema:
                type: string

# CollectionId=>Locations=>LocationId
  "/collections/{collectionId}/locations/{locationId}":
    x-exegesis-controller: edrLocationsQueryController
    get:
      x-exegesis-operationId: getALocation_collection
      parameters:
        - $ref: "#/components/parameters/locationId"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/parameter-name"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/f"
      responses:
        "200":
          description: Ok.
          content:
            application/vnd.cov+json:
              schema: 
                $ref: "#/components/schemas/coverageJSON"
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeatureCollection"
            text/yaml:
              schema:
                type: string

# CollectionId=>InstanceId=>Locations
  "/collections/{collectionId}/instances/{instanceId}/locations":
    x-exegesis-controller: edrLocationsQueryController
    get:
      x-exegesis-operationId: getLocations_instance
      parameters:
        - $ref: "#/components/parameters/bbox"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/collectionId"
        - $ref: "#/components/parameters/instanceId"
      responses:
        "200":
          description: Ok.
          content:
            application/geo+json:
              schema:
                $ref: "#/components/schemas/edrGeoJSONFeatureCollection"
            text/yaml:
              schema:
                type: string

# CollectionId=>InstanceId=>LocationId
  "/collections/{collectionId}/instances/{instanceId}/locations/{locationId}":
  x-exegesis-controller: edrLocationsQueryController
  get:
    x-exegesis-operationId: getALocation_instance

# CollectionId=>Locations
  "/collections/{collectionId}/trajectory":
    x-exegesis-controller: edrResources_CollectionIdController
    get:
      x-exegesis-operationId: edrTrajectoryGet
      parameters:
        - $ref: "#/components/parameters/coords" #Must be 2D
        - $ref: "#/components/parameters/z"
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/parameter-name"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/f"


  "/collections/{collectionId}/corridor":
    x-exegesis-controller: edrResources_CollectionIdController
    description: > 
      A corridor returns data along and around the path defined by the coords param
    get:
      x-exegesis-operationId: edrCorridorGet
      parameters:
        - $ref: "#/components/parameters/coords" #Must be LineString/MultiLineString
        - $ref: "#/components/parameters/datetime"
        - $ref: "#/components/parameters/z"
        - $ref: "#/components/parameters/parameter-name"
        - $ref: "#/components/parameters/resolution-x"
        - $ref: "#/components/parameters/resolution-y"
        - $ref: "#/components/parameters/resolution-z"
        - $ref: "#/components/parameters/corridor-width"
        - $ref: "#/components/parameters/width-units"
        - $ref: "#/components/parameters/corridor-height"
        - $ref: "#/components/parameters/height-units"
        - $ref: "#/components/parameters/crs"
        - $ref: "#/components/parameters/f"#Get metadata on the instances(versions) of the collection
#Get data from an instance according to a specific queryType
  "/collections/{collectionId}/instances/{instanceId}/{queryType}":
    x-exegesis-controller: edrInstancesController
    get:
      x-exegesis-operationId: edr_getSpecificInstanceQueryType
    post:
      x-exegesis-operationId: edr_postSpecificInstanceQueryType


components:
  schemas:
    link:
      type: object
      required:
        - href
        - rel
      properties:
        href:
          type: string
          format: uri
        rel:
          type: string
          examples: [self, alternate]
        type:
          description: The content-type of the linked resource
          type: string
          examples: [application/json, application/geo+json]
        hreflang:
          description: The language of the linked resource.
          type: string
          examples: [en, sw, ch]
        title:
          type: string
        length:
          description: The size of the resource. Preferrably in bytes
          type: integer
        templated:
          description: >
            Defines if the link href value is a template with values requiring replacement",
          type: boolean
    keywords:
      type: array
      items:
        type: string
      description: >
        Key identifiers of the resources provided by this API
      examples: [temperature, wind]
    provider:
      type: object
      properties:
        name:
          description: >
            Name of the org providing the info
          type: string
        url:
          type: string
          format: uri
          description: >
            Link to the provider's website
    contact:
      type: object
      properties:
        email:
          type: string
          format: email
          description: >
            email of the service provider
        phone:
          description: >
            phone number of provider
          type: string
          format: phone
        fax:
          description: >
            Fax number of service provider
          type: string
        hours:
          type: string
          description: Operating hours of the service provider
        instructions: #Probably how to contact them?
          type: string
        address:
          type: string
          description: Alphanumeric code for physical address of the service provider. To be used in conjuction with? postalcode/city/province
        city:
          type: string
          description: City of residence of service provider
        stateorprovince:
          type: string
        country:
          type: string
          description: Can be a name, ISO2 or ISO3 code
    collection:
      type: object
      required:
        - links
        - id
        - extent
        - data_queries
        - parameter_names
        - output_formats
        - crs
      properties:
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        id:
          type: string
          description: Unique identifier of the collection
        title:
          type: string
          description: Summary of the collection
        description:
          type: string
          description: More detailed summary of the collection
        keywords:
          $ref: "#/components/schemas/keywords"
        extent:
          type: object
          description: Spatial-temporal bounds of the collection and their metadata
          required:
            - spatial
            - temporal
          properties:
            spatial:
              type: object
              description: Spatial bounds of the collection
              required:
                - bbox
                - crs
              properties:
                bbox:
                  $ref: "#/components/schemas/bbox"
                crs:
                  type: string
                  format: uri
                  description: Will use the schema http://www.opengis.net/def/crs/{authority}/{version}/{code}
                name:
                  description: |-
                    Name of vertical coordinate system? ###
                  type: string
            temporal:
              description: Temporal bounds of collection
              type: object
              required:
                - interval
                - trs
              properties:
                interval:
                  $ref: "#/components/schemas/interval"
                trs:
                  type: string
                  format: uri
                values:
                  description: >
                    Provides information about the time intervals available in the collection \nas ISO8601 compliant dates, either as a time range specified \nas start time / end time  (e.g. 2017-11-14T09:00Z/2017-11-14T21:00Z)  or\nas number of repetitions / start time / interval (e.g. R4/2017-11-14T21:00Z/PT3H) \nor a list of time values (e.g.\n2017-11-14T09:00Z,2017-11-14T12:00Z,2017-11-14T15:00Z,2017-11-14T18:00Z,2017-11-14T21:00Z)
                  type: array
                  minItems: 1
                  items:
                    type: string
                    minItems: 1
                    items:
                      type: string
                      minItems: 1
                      nullable: true
                      format: date-time
                      examples:
                        [
                          [2020-11-12T12:15Z],
                          [
                            2020-11-12T12:15Z,
                            2020-11-12T12:30Z,
                            2020-11-12T12:45Z,
                          ],
                          [R12/2022-01-14T09:00Z/2022-01-15T09:00Z],
                          [R12/2022-01-14T09:00Z/PT1H],
                          [
                            R12/2022-01-14T09:00Z/PT1H,
                            R4/2022-01-14T21:00Z/PT3H,
                            R4/2022-01-14T21:00Z/PT6H,
                          ],
                        ]
                name:
                  description: Name of the trs
                  type: string
            vertical:
              type: object
              description: The vertical extent of information in the collection
              required:
                - interval
                - vrs
              properties:
                interval:
                  type: array
                  description: In the Core only a single time interval is supported. Extensions may support\nmultiple intervals. If multiple intervals are provided, the union of the\nintervals describes the vertical extent.
                  minItems: 1
                  items:
                    type: array
                    description: minimum and maximum heights of the vertical interval. The values are in the\nvertical coordinate reference system specified in `vrs`. By default\nthis is the vertical coordinate reference system of the source information.
                    minItems: 1
                    items:
                      type: string
                      nullable: true
                  example: [[number|null,number|nul]]
                values:
                  type: array
                  minItems: 1
                  items:
                    type: string
                    nullable: true
                    examples: [[2/100],[R50/1000/-50],[2,100,80,100]]
                vrs:
                  description: Coordinate reference system of the coordinates in the vertical extent\n(property `interval`). 
                  type: string
                  format: uri
                name:
                  description: Name of the Vertical ref system
                  type: string
        data_queries:
          description: Detailed information about individual query types
          type: object
          properties:
            position:   
              type: object       
              properties:
                link:
                  $ref: "#/components/schemas/link"
                properties:
                  type: object               
    instances:
      type: object
      required:
        - links
        - instances
      properties:
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
        instances:
          type: array
          items:
            $ref: "#/components/schemas/collection"
    bbox:
      description: >-
        `From OGC API- Features Doc`
        Only features that have a geometry that intersects the bounding box are
        selected.

        The bounding box is provided as four or six numbers, depending on
        whether the

        coordinate reference system includes a vertical axis (height or depth):


        * Lower left corner, coordinate axis 1

        * Lower left corner, coordinate axis 2

        * Minimum value, coordinate axis 3 (optional)

        * Upper right corner, coordinate axis 1

        * Upper right corner, coordinate axis 2

        * Maximum value, coordinate axis 3 (optional)


        If the value consists of four numbers, the coordinate reference system
        is

        WGS 84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        If the value consists of six numbers, the coordinate reference system is
        WGS 84

        longitude/latitude/ellipsoidal height
        (http://www.opengis.net/def/crs/OGC/0/CRS84h)

        unless a different coordinate reference system is specified in the
        parameter `bbox-crs`.


        The query parameter `bbox-crs` is specified in OGC API - Features - Part
        2: Coordinate

        Reference Systems by Reference.


        For WGS 84 longitude/latitude the values are in most cases the sequence
        of

        minimum longitude, minimum latitude, maximum longitude and maximum
        latitude.

        However, in cases where the box spans the antimeridian the first value

        (west-most box edge) is larger than the third value (east-most box
        edge).


        If the vertical axis is included, the third and the sixth number are the

        bottom and the top of the 3-dimensional bounding box.


        If a feature has multiple spatial geometry properties, it is the
        decision of the

        server whether only a single spatial geometry property is used to
        determine

        the extent or all relevant geometries.
      summary: >
        _collection_extent_bbox_crs 
        ############################################################################
        Projected Coordinate Systems (without height): [Xmin,Ymin,Xmax,Ymax][]
        Geographic Coordinate Systems (wihout height): [Ymin,Xmin,Ymax,Xmax][]
        --------------------------------------------------------------------
        Projected Coordinate Systems (with height): [Xmin,Ymin,Zmin,Xmax,Ymax,Zmax][]
        Geographic Coordinate Systems (with height): [Ymin,Xmin,Zmin,Ymin,Xmax,Zmax][]
        #############################################################################
        _parameter: bbox
        When a bbox is specified and length===5, then Zmax is undefined?
        When a bbox is specified and length ===6, then Zmin & Zmax are defined?
      type: array
      minItems: 1
      items:
        type:
        oneOf:
          - minItems: 4
            maxItems: 4
          - minItems: 6
            maxItems: 6
    interval:
      type: array
      minItems: 1
      items:
        type: array
        minItems: 2
        maxItems: 2
        items:
          type: string
################Response Schemas
    GeoJsonObject:
      description: >
        GeoJSon object

        The coordinate reference system for all GeoJSON coordinates is a
        geographic coordinate reference system, using the World Geodetic System
        1984 (WGS 84) datum, with longitude and latitude units of decimal
        degrees. This is equivalent to the coordinate reference system
        identified by the Open Geospatial Consortium (OGC) URN An OPTIONAL
        third-position element SHALL be the height in meters above or below the
        WGS 84 reference ellipsoid. In the absence of elevation values,
        applications sensitive to height or depth SHOULD interpret positions as
        being at local ground or sea level.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      type: object
      properties:
        type:
          type: string
          enum:
            - Feature
            - FeatureCollection
            - Point
            - MultiPoint
            - LineString
            - MultiLineString
            - Polygon
            - MultiPolygon
            - GeometryCollection
    Geometry:
      description: >
        Abstract type for all GeoJSon object except Feature and
        FeatureCollection
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
                - GeometryCollection
          required:
            - type
          discriminator:
            propertyName: type
    GeometryElement:
      description: >
        Abstract type for all GeoJSon 'Geometry' object the type of which is not
        'GeometryCollection'
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          properties:
            type:
              type: string
              enum:
                - Point
                - MultiPoint
                - LineString
                - MultiLineString
                - Polygon
                - MultiPolygon
          required:
            - type
          discriminator:
            propertyName: type
    Feature:
      description: GeoJSon 'Feature' object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          required:
            - geometry
            - properties
          properties:
            geometry:
              allOf:
                - nullable: true
                - $ref: '#/components/schemas/Geometry'
            properties:
              type: object
              nullable: true
            id:
              oneOf:
                - type: number
                - type: string
    FeatureCollection:
      description: GeoJSon 'FeatureCollection' object
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      allOf:
        - $ref: '#/components/schemas/GeoJsonObject'
        - type: object
          required:
            - features
          properties:
            features:
              type: array
              items:
                $ref: '#/components/schemas/Feature'
    Position:
      description: >
        GeoJSon fundamental geometry construct.

        A position is an array of numbers. There MUST be two or more elements.
        The first two elements are longitude and latitude, or easting and
        northing, precisely in that order and using decimal numbers. Altitude or
        elevation MAY be included as an optional third element.

        Implementations SHOULD NOT extend positions beyond three elements
        because the semantics of extra elements are unspecified and ambiguous.
        Historically, some implementations have used a fourth element to carry a
        linear referencing measure (sometimes denoted as "M") or a numerical
        timestamp, but in most situations a parser will not be able to properly
        interpret these values. The interpretation and meaning of additional
        elements is beyond the scope of this specification, and additional
        elements MAY be ignored by parsers.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.1
      type: array
      minItems: 2
      maxItems: 3
      items:
        type: number
    LineStringCoordinates:
      description: |
        GeoJSon fundamental geometry construct, array of two or more positions.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.4
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 2
    LinearRing:
      description: >
        A linear ring is a closed LineString with four or more positions
        The first and last positions are equivalent, and they MUST contain
        identical values; their representation SHOULD also be identical.

        A linear ring is the boundary of a surface or the boundary of a hole in
        a surface.

        A linear ring MUST follow the right-hand rule with respect to the area
        it bounds, i.e., exterior rings are counterclockwise, and holes are
        clockwise.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      type: array
      items:
        $ref: '#/components/schemas/Position'
      minItems: 4
    Point:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.2
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - type
            - coordinates
          properties:
            type:
              type: string
              enum:
                - Point
            coordinates:
              $ref: '#/components/schemas/Position'
    MultiPoint:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.3
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/Position'
    LineString:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.4
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              $ref: '#/components/schemas/LineStringCoordinates'
    MultiLineString:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.5
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/LineStringCoordinates'
    Polygon:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.6
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                $ref: '#/components/schemas/LinearRing'
    MultiPolygon:
      description: GeoJSon geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.7
      allOf:
        - $ref: '#/components/schemas/GeometryElement'
        - type: object
          required:
            - coordinates
          properties:
            coordinates:
              type: array
              items:
                type: array
                items:
                  $ref: '#/components/schemas/LinearRing'
    GeometryCollection:
      type: object
      description: >
        GeoJSon geometry collection

        GeometryCollections composed of a single part or a number of parts of a
        single type SHOULD be avoided when that single part or a single object
        of multipart type (MultiPoint, MultiLineString, or MultiPolygon) could
        be used instead.
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.1.8
      allOf:
        - $ref: '#/components/schemas/Geometry'
        - type: object
          required:
            - geometries
          properties:
            geometries:
              type: array
              items:
                $ref: '#/components/schemas/GeometryElement'
              minItems: 0
       
    coverageJSON:
    edrGeoJSON:
    featuresGeoJSON:
  parameters:
    crs:
      name: crs
      description: >
        The default CRS is http://www.opengis.net/def/crs/OGC/1.3/CRS84 which is
        parsed as http://www.opengis.net/def/crs/EPSG/0/4326. All the coordinate
        reference systems supported by PostGIS v3.4.0 are supported by this API.
        They are all listed here and also otherible at the
        {baseURL}/spatial_ref_sys endpoint.
      in: query
      required: false
      schema:
        type: string
        format: uri
        default: http://www.opengis.net/def/crs/OGC/1.3/CRS84
      style: form
      explode: false
    f:
      name: f
      in: query
      required: false
      schema:
        type: string
        default: json
    bbox:
      name: bbox
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/bbox"
      style: form
      explode: false
    datetime:
      name: datetime
      in: query
      description: >-
        `From OGC API-Features`
        Either a date-time or an interval. Date and time expressions adhere to
        RFC 3339.

        Intervals may be bounded or half-bounded (double-dots at start or end).


        Examples:


        * A date-time: "2018-02-12T23:20:50Z"

        * A bounded interval: "2018-02-12T00:00:00Z/2018-03-18T12:31:12Z"

        * Half-bounded intervals: "2018-02-12T00:00:00Z/.." or
        "../2018-03-18T12:31:12Z"


        Only features that have a temporal property that intersects the value of

        `datetime` are selected.


        If a feature has multiple temporal properties, it is the decision of the

        server whether only a single temporal property is used to determine

        the extent or all relevant temporal properties.


        The only currently supported intervals are those provided as an example.
        If they 

        do not `..` for unbounded or / for bounded intervals, `error(500)` `as
        of now`
      required: false
      schema:
        type: string
      style: form
      explode: false
    areaCoords:
      in: query
      name: coords
      description: |-
        Only data that has a geometry that intersects the area defined by the polygon
        are selected. 

        The polygon is defined using a Well Known Text string following 

        coords=POLYGON((x y,x1 y1,x2 y2,...,xn yn x y))

        which are values in the coordinate system defined by the crs query parameter 
        (if crs is not defined the values will be assumed to be WGS84 longitude/latitude coordinates).  

        For instance a polygon that roughly describes an area that contains 
        South West England in WGS84 would look like: 

        coords=POLYGON((-6.1 50.3,-4.35 51.4,-2.6 51.6,-2.8 50.6,-5.3 49.9,-6.1,50.3))

        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

        The coords parameter will only support 2D POLYGON definitions
      required: true
      schema:
        type: string
        format: wkt
    trajectoryCoords:
      in: query
      name: coords
      required: true
      schema:
        type: string
        format: wkt
      description: |-
        Only data that has a geometry that intersects the area defined by the linestring
        are selected. 

        The trajectory is defined using a Well Known Text string following 

        A 2D trajectory, on the surface of earth with no time or height dimensions: 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )

        A 2D trajectory, on the surface of earth with all for the same time and no height dimension, time value defined in ISO8601 format by the `datetime` query parameter : 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )&time=2018-02-12T23:00:00Z 
            
        A 2D trajectory, on the surface of earth with no time value but at a fixed height level, height defined in the collection height units by the `z` query parameter : 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )&z=850 

        A 2D trajectory, on the surface of earth with all for the same time and at a fixed height level, time value defined in ISO8601 format by the `datetime` query parameter and height defined in the collection height units by the `z` query parameter : 
            coords=LINESTRING(-2.87 51.14 , -2.98 51.36 ,-3.15 51.03 ,-3.48 50.74 ,-3.36 50.9 )&time=2018-02-12T23:00:00Z&z=850 

        A 3D trajectory, on the surface of the earth but over a time range with no height values:
        coords=LINESTRINGM(-2.87 51.14  1560507000,-2.98 51.36  1560507600,-3.15 51.03  1560508200,-3.48 50.74  1560508500,-3.36 50.9  1560510240)

        A 3D trajectory, on the surface of the earth but over a time range with a fixed height value, height defined in the collection height units by the `z` query parameter : 
        coords=LINESTRINGM(-2.87 51.14  1560507000,-2.98 51.36  1560507600,-3.15 51.03  1560508200,-3.48 50.74  1560508500,-3.36 50.9  1560510240)&z=200


        A 3D trajectory, through a 3D volume with height or depth, but no defined time:
        coords=LINESTRINGZ(-2.87 51.14  0.1,-2.98 51.36  0.2,-3.15 51.03  0.3,-3.48 50.74  0.4,-3.36 50.9  0.5)

        A 3D trajectory, through a 3D volume with height or depth, but a fixed time time value defined in ISO8601 format by the `datetime` query parameter:
        coords=LINESTRINGZ(-2.87 51.14  0.1,-2.98 51.36  0.2,-3.15 51.03  0.3,-3.48 50.74  0.4,-3.36 50.9  0.5)&time=2018-02-12T23:00:00Z

        A 4D trajectory, through a 3D volume but over a time range:
        coords=LINESTRINGZM(-2.87 51.14 0.1 1560507000,-2.98 51.36 0.2 1560507600,-3.15 51.03 0.3 1560508200, -3.48 50.74 0.4 1560508500, -3.36 50.9 0.5 1560510240)
        (using either the `time` or `z` parameters with a 4D trajectory wil generate an error response)

        where Z in `LINESTRINGZ` and `LINESTRINGZM` refers to the height value.  
        `If the specified CRS does not define the height units, the heights units will default to metres above mean sea level`

        and the M in `LINESTRINGM` and `LINESTRINGZM` refers to the number of seconds that have elapsed since the Unix epoch, that is the time 00:00:00 UTC on 1 January 1970. See
        https://en.wikipedia.org/wiki/Unix_time  
    z:
      name: z
      in: query
      description: |+
          Define the vertical level to return data from 
          i.e. z=level

          for instance if the 850hPa pressure level is being queried

          z=850

          or a range to return data for all levels between and including 2 defined levels
          i.e. z=minimum value/maximum value

          for instance if all values between and including 10m and 100m

          z=10/100

          finally a list of height values can be specified
          i.e. z=value1,value2,value3

          for instance if values at 2m, 10m and 80m are required

          z=2,10,80

          An Arithmetic sequence using Recurring height intervals, the difference is the number of recurrences is defined at the start 
          and the amount to increment the height by is defined at the end

          i.e. z=Rn/min height/height interval

          so if the request was for 20 height levels 50m apart starting at 100m:

          z=R20/100/50

          When not specified data from all available heights SHOULD be returned
      required: false
      schema:
        type: string
      style: form
      explode: false

    Cube-z:
      in: query
      name: z
      required: false
      description: |+
        Define the vertical levels to return data from 
        
        The value will override any vertical values defined in the BBOX query parameter 
        
        A range to return data for all levels between and including 2 defined levels

        i.e. z=minimum value/maximum value

        for instance if all values between and including 10m and 100m

        z=10/100

        A list of height values can be specified
        i.e. z=value1,value2,value3

        for instance if values at 2m, 10m and 80m are required

        z=2,10,80

        An Arithmetic sequence using Recurring height intervals, the difference is the number of recurrences is defined at the start 
        and the amount to increment the height by is defined at the end

        i.e. z=Rn/min height/height interval

        so if the request was for 20 height levels 50m apart starting at 100m:

        z=R20/100/50

        When not specified data from all available heights SHOULD be returned
      schema: 
        type: string
    parameter-name:
      in: query
      name: parameter-name
      description: comma delimited list of parameters to retrieve data for.  Valid parameters are listed in the collections metadata
      required: false
      schema:
        type: string
      style: form
    within:
      in: query
      required: true
      name: within
      schema:
        type: string
        format: number
        examples: ["20","0.5","1000"]
    within-units:
      name: within-units
      in: query
      required: true
      schema:
        type: string
        examples: [miles,kilometers]
    resolution-x:
      name: resolution-x
      in: query
      schema:
        type: string
      description: >
        Defined it the user requires data at a different resolution from the native resolution of the data along the x-axis

        If this is a single value it denotes the number of intervals to retrieve data for along the x-axis
        
          i.e. resolution-x=10 
        
        would retrieve 10 values along the x-axis from the minimum x coordinate to maximum x coordinate (i.e. a value at both the minimum x and maximum x coordinates and 8 values between).
      required: false
    resolution-y:
      name: resolution-y
      in: query
      schema:
        type: string
      description: >
        Defined it the user requires data at a different resolution from the native resolution of the data along the y-axis

        If this is a single value it denotes the number of intervals to retrieve data for along the y-axis
    
          i.e. resolution-y=10 
    
        would retrieve 10 values along the y-axis from the minimum y coordinate to maximum y coordinate (i.e. a value at both the minimum y and maximum y coordinates and 8 values between)
      required: false
    resolution-z:
      name: resolution-z
      in: query
      schema:
        type: string
      description: >
        Defined it the user requires data at a different resolution from the native resolution of the data along the z-axis

        If this is a single value it denotes the number of intervals to retrieve data for along the z-axis
    
          i.e. resolution-z=10 
    
        would retrieve 10 values along the z-axis from the minimum z coordinate to maximum z  coordinate (i.e. a value at both the minimum z and maximum z coordinates and 8 values between).
      required: false
    corridor-width:
      name: corridor-width
      in: query
      required: true
      description: |+
        width of the corridor

        The width value represents the whole width of the corridor where
        the trajectory supplied in the `coords` query parameter is the centre
        point of the corridor

        `corridor-width={width}`

        e.g.  corridor-width=100

        Would be a request for a corridor 100 units wide with the coords parameter values being the centre point of the requested corridor, 
        the request would be for data values 50 units either side of the trajectory coordinates defined in the coords parameter. 

        The width units supported by the collection will be provided in the API metadata responses
      schema:
        type: string
    width-units:
      name: width-units
      in: query
      required: true
      description: Distance units for the corridor-width parameter
      schema:
        type: string
    corridor-height:
      name: corridor-height
      in: query
      required: true
      description: |+
        height of the corridor

        The height value represents the whole height of the corridor where
        the trajectory supplied in the `coords` query parameter is the centre
        point of the corridor

        `corridor-height={height}`

        e.g.  corridor-height=100

        Would be a request for a corridor 100 units high with the coords parameter values being the centre point of the requested corridor, 
        the request would be for data values 50 units either side of the trajectory coordinates defined in the coords parameter. 

        The height units supported by the collection will be provided in the API metadata responses
      schema:
        type: string
    height-units:
      name: height-units
      in: query
      description: Distance units for the corridor-height parameter
      required: true
      schema:
        type: string   

    positionCoords:
      name: coords
      in: query
      required: true
      schema:
        type: string
        format: wkt
      description: |+
        location(s) to return data for, the coordinates are defined by a Well Known Text
        (wkt) string. to retrieve a single location :

        POINT(x y) i.e. POINT(0 51.48) for Greenwich, London

        And for a list of locations

        MULTIPOINT((x y),(x1 y1),(x2 y2),(x3 y3))

        i.e.
        MULTIPOINT((38.9 -77),(48.85 2.35),(39.92 116.38),(-35.29 149.1),(51.5 -0.1))

        see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
        https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

        the coordinate values will depend on the CRS parameter, if this is not defined
        the values will be assumed to WGS84 values (i.e x=longitude and y=latitude)
    radiusCoords:
      name: coords
      in: query
      required: true
      schema:
        type: string
        format: wkt
      description: |+
         location(s) to return data for, the coordinates are defined by a Well Known Text
          (wkt) string. to retrieve a single location :

          POINT(x y) i.e. POINT(0 51.48) for Greenwich, London

          see http://portal.opengeospatial.org/files/?artifact_id=25355 and 
          https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry

          the coordinate values will depend on the CRS parameter, if this is not defined
          the values will be assumed to WGS84 values (i.e x=longitude and y=latitude)

################ Path Params
    instanceId:
      name: instanceId
      in: path
      description: Identifier (id) of a specific instance of a collection
      required: true
      schema:
        type: string
    itemId:
      in: path
      name: itemId
      required: true
      schema:
        type: string
    queryType:
      in: path
      name: queryType
      required: true
      schema:
        type: string
        enum: [position,trajectory,items,corridor,cube,radius]

    locationId:
      in: path
      name: locationId
      required: true
      schema:
        type string

    collectionId:
      in: path
      name: collectionId
      required: true
      schema:
        type string
    